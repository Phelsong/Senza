from _typeshed import Incomplete
from collections.abc import Generator
from functools import cache as cache
from pyodide.ffi import create_proxy as create_proxy
from pyscript import HTML as HTML
from textwrap import dedent as dedent
from typing import Any

alert: Incomplete

class BaseElement:
    style: Incomplete
    def __init__(self, js_element) -> None: ...
    def __eq__(self, obj): ...
    @property
    def parent(self): ...
    def create(
        self,
        type_,
        is_child: bool = ...,
        classes: Incomplete | None = ...,
        html: Incomplete | None = ...,
        label: Incomplete | None = ...,
    ): ...
    @property
    def appendChild(self): ...

class Element(BaseElement):
    def append(self, child): ...
    def from_js(self, js_element): ...
    def query(self, selector): ...
    def query_all(self, selector) -> Generator[Incomplete, None, None]: ...
    @property
    def html(self): ...
    @html.setter
    def html(self, value) -> None: ...
    @property
    def content(self): ...
    @content.setter
    def content(self, value) -> None: ...
    @property
    def id(self): ...
    @id.setter
    def id(self, value) -> None: ...
    @property
    def checked(self): ...
    @checked.setter
    def checked(self, value) -> None: ...
    @property
    def value(self): ...
    @value.setter
    def value(self, value) -> None: ...
    def clear(self) -> None: ...
    def clone(self, new_id: Incomplete | None = ...): ...
    def remove_class(self, classname): ...
    def add_class(self, classname): ...
    @property
    def classes(self): ...
    def show_me(self) -> None: ...
    def when(self, event, handler) -> None: ...

class StyleProxy(dict):
    def __init__(self, element: Element) -> None: ...
    def __getitem__(self, key) -> None: ...
    def __setitem__(self, key, value) -> None: ...
    def pop(self, key) -> None: ...
    def set(self, **kws) -> None: ...
    @property
    def visibility(self): ...
    @visibility.setter
    def visibility(self, value) -> None: ...
    @property
    def background(self): ...
    @background.setter
    def background(self, value) -> None: ...
    @property
    def color(self): ...
    @color.setter
    def color(self, value) -> None: ...
    @property
    def backgroundColor(self): ...
    @backgroundColor.setter
    def backgroundColor(self, value) -> None: ...

class StyleCollection:
    def __init__(self, collection: ElementCollection) -> None: ...
    def __get__(self, obj, objtype: Incomplete | None = ...): ...
    def __getitem__(self, key): ...
    def __setitem__(self, key, value) -> None: ...
    def pop(self, key) -> None: ...

class ElementCollection:
    style: Incomplete
    def __init__(self, elements: [Element]) -> None: ...
    def __getitem__(self, key): ...
    @property
    def html(self): ...
    @html.setter
    def html(self, value) -> None: ...
    @property
    def children(self): ...
    def __iter__(self): ...

class DomScope:
    def __getattr__(self, __name: str) -> Any: ...

class PyDom(BaseElement):
    ids: Incomplete
    def __init__(self) -> None: ...
    def create(
        self,
        type_,
        parent: Incomplete | None = ...,
        classes: Incomplete | None = ...,
        html: Incomplete | None = ...,
    ): ...
    def __getitem__(self, key): ...
    @staticmethod
    def when(element, event_type): ...

document: Incomplete

def query(selector): ...
def query_all(selector) -> Generator[Incomplete, None, None]: ...
